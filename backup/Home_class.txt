import React, { useState, useEffect } from 'react';
import { Text, View, TextInput, TouchableOpacity, Alert } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { Ionicons } from '@expo/vector-icons';
import * as Yup from 'yup';

import styles from './styles';
import Header from '../../components/Header';

import api from '../../services/api';
import InputError from '../../utils/InputError';

import getConnection from '../../database/connection';
const connection = getConnection('irpf');
const database = connection.database;
const sql = connection.sql;

type Irpf = {
  pagou?: [any],
  name: string,
  gain: number,
  gastoEduc?: number,
  gastoSaude?: number,
  gastoDeduc?: number,
  valorFaixaIsento?: number,
  valorFaixa075?: number,
  valorFaixa150?: number,
  valorFaixa225?: number,
  valorFaixa275?: number,
  totalAPagar?: number,
  inputError?: any,

  [props:string]: any
}

export default class Result extends React.Component<any, any> {
  constructor(props: any){
    super(props);
    this.state= {
      name: '',
      gain:0,
      gastoEduc:0,
      gastoSaude: 0,
      gastoDeduc: 0,
      inputError: [{}, {}, {}, {}, {}],
    }
  }

  async handleCalculate(){
    console.log(this.state);
    try {
      const obj:Irpf = {
        name: this.state.name,
        gain: this.state.gain,
        gastoEduc: this.state.gastoEduc,
        gastoSaude: this.state.gastoSaude,
        gastoDeduc: this.state.gastoDeduc
      }

      const validate = Yup.object().shape({
        name: Yup.string().min(3).required(),
        gain: Yup.number().positive().required().min(1),
        gastoEduc: Yup.number().positive().required().min(1),
        gastoSaude: Yup.number().positive().required().min(1),
        gastoDeduc: Yup.number().positive().required().min(1),
      });

      await validate.validate(obj, {
        abortEarly: false,
      })

      const response = await api.get(`/irpf/${this.state.gain}/${this.state.name}`);
      const data: Irpf = await response.data;

      // const body = { name, gain }
      // const response = await api.post('/irpf', body);
      // const data = await response.data;

      //Limpando borda de erro
      this.setState({...this.state, inputError: [{}, {}, {}, {}, {}] });

      this.props.navigation.navigate('Result', data);

    } catch (err) {
      if (err instanceof Yup.ValidationError) {
        var errors: Array<Object> = [{}, {}, {}, {}, {}];

        err.errors.forEach(err => {
          console.log('Erro - ' + err);
          if (InputError(err) > -1) {
            errors[InputError(err)] = { borderColor: '#F00' };
          }

        });
        this.setState({ ...this.state, inputError: errors });
      } else {
        console.log(err);
      }
    }
  }

  handleText(input: string, value: string) {
    this.setState({...this.state, [input]: value});
  }


  render(): React.ReactNode {
    return (
      <>
        <Header
          title='Cálculo de IR'
          isShowBackButton={false}
        />
  
        <View style={styles.container}>
  
          <View style={styles.formContainer}>
  
            <Text style={styles.describe}>
              Informe seu Nome
            </Text>
            <TextInput
              style={[styles.input, this.state.inputError[0] ]}
              onChangeText={(text) => this.handleText('name', text)}
            />
  
            <Text style={styles.describe}>
              Ganho Anual (R$)
          </Text>
  
            <TextInput
              style={[styles.input, this.state.inputError[1]]}
              keyboardType='numeric'
              onChangeText={text => this.setState({...this.state, gain: Number(text)}) }
            />
  
            <Text style={styles.describe}>
              Gastos com Educação (R$)
          </Text>
            <TextInput
              style={[styles.input, this.state.inputError[2]]}
              keyboardType='numeric'
              onChangeText={text => this.setState({...this.state, gastoEduc: Number(text)}) }
            />
  
            <Text style={styles.describe}>
              Gastos com Saúde (R$)
          </Text>
            <TextInput
              style={[styles.input, this.state.inputError[3]]}
              keyboardType='numeric'
              onChangeText={text => this.setState({...this.state, gastoSaude: Number(text)}) }
            />
  
            <Text style={styles.describe}>
              Demais Deduções (R$)
          </Text>
            <TextInput
              style={[styles.input, this.state.inputError[4]]}
              keyboardType='numeric'
              onChangeText={text => this.setState({...this.state, gastoDeduc: Number(text)}) }
            />
  
            <TouchableOpacity
              style={styles.button}
              onPress={this.handleCalculate}
            >
              <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'center' }}>
                <Ionicons name='ios-calculator' size={30} color='#FFF' />
                <Text style={styles.textButton}>Calcular</Text>
              </View>
            </TouchableOpacity>
  
          </View>
  
          <TouchableOpacity
            style={[styles.button, { marginTop: 30 }]}
            onPress={() => this.props.navigation.navigate('Historic')}
          >
            <Text style={styles.textButton}>Histórico de Cálculos</Text>
          </TouchableOpacity>
  
        </View>
      </>
    );
  }
}
